Ext.data.JsonP.gantt_scheduler_localization({"guide":"<h1 id='gantt_scheduler_localization-section-localizing-scheduler-and-gantt'>Localizing Scheduler and Gantt</h1>\n<div class='toc'>\n<p><strong>Contents</strong></p>\n<ol>\n<li><a href='#!/guide/gantt_scheduler_localization-section-introduction'>Introduction</a></li>\n<li><a href='#!/guide/gantt_scheduler_localization-section-localizing-extjs-%2F-sencha-touch'>Localizing ExtJS / Sencha Touch</a></li>\n<li><a href='#!/guide/gantt_scheduler_localization-section-localizing-bryntum-components---scheduler-and-gantt'>Localizing Bryntum components - Scheduler and Gantt</a></li>\n<li><a href='#!/guide/gantt_scheduler_localization-section-creating-locales-for-new-languages'>Creating locales for new languages</a></li>\n<li><a href='#!/guide/gantt_scheduler_localization-section-localizable-mixin'>Localizable mixin</a></li>\n</ol>\n</div>\n\n<h2 id='gantt_scheduler_localization-section-introduction'>Introduction</h2>\n\n<p>Localization is the process of presenting the same user interface in multiple languages.</p>\n\n<p>In the codebase, it usually is achieved by referring to \"dictionary\" entries instead of using hard-coded\nstrings. Such dictionaries are called \"locales\".</p>\n\n<p>Localizing an application that uses the Bryntum components is a task that can be split in 3 subtasks:</p>\n\n<ol>\n<li>Localizing the underlying library (Ext JS or Sencha Touch). This sets the generic set of words - date formats, day/month names etc.</li>\n<li>Localizing the Bryntum component itself.</li>\n<li>Localizing the application - you can use any approach for this (ours, Sencha's or you can of course use your own homecooked solution)</li>\n</ol>\n\n\n<p>At the moment of writing this guide, the Ext Gantt and Ext Scheduler components each have their localization files for the following languages:\nEnglish, German, Russian, Swedish and Polish.</p>\n\n<p>Each language is represented with a separate locale file. All locale files are placed in the 'locale' sub-folder of the\ncorresponding namespace folder ('js/Sch/locale' for Scheduler namespace and 'js/Gnt/locale' for Gantt).</p>\n\n<h2 id='gantt_scheduler_localization-section-localizing-extjs-%2F-sencha-touch'>Localizing ExtJS / Sencha Touch</h2>\n\n<p>To localize the underlying library you need to include the desired locale file in your web page - after the library file.\nIn Ext JS, locale files are located in the <code>/locale</code> folder, in Sencha Touch - in the <code>/src/locale</code>. For example:</p>\n\n<pre><code>&lt;!-- Library --&gt;\n&lt;script src=\"http://cdn.sencha.com/ext/gpl/4.2.0/ext-all.js\" type=\"text/javascript\"&gt;&lt;/script&gt;\n\n&lt;!-- Locale --&gt;\n&lt;script type=\"text/javascript\" src=\"http://cdn.sencha.com/ext/gpl/4.2.0/locale/ext-lang-de.js\"&gt;&lt;/script&gt;\n</code></pre>\n\n<h2 id='gantt_scheduler_localization-section-localizing-bryntum-components---scheduler-and-gantt'>Localizing Bryntum components - Scheduler and Gantt</h2>\n\n<h3 id='gantt_scheduler_localization-section-locale-classes'>Locale classes</h3>\n\n<p>Bryntum locales are <em>classes</em>. They all subclass a common base class - <a href=\"#!/api/Sch.locale.Locale\" rel=\"Sch.locale.Locale\" class=\"docClass\">Sch.locale.Locale</a>. This means that locales can be added to\nthe page using regular &lt;script&gt; tags (statically), or they can be required by other classes or loaded with <code>Ext.Loader</code> (dynamically).</p>\n\n<h3 id='gantt_scheduler_localization-section-static-scheduler-localization'>Static Scheduler localization</h3>\n\n<pre><code>&lt;!-- Library --&gt;\n&lt;script src=\"scheduler-2.2.5/sch-all-debug.js\" type=\"text/javascript\"&gt;&lt;/script&gt;\n\n&lt;!-- Locale --&gt;\n&lt;script src=\"scheduler-2.2.5/js/Sch/locale/De.js\" type=\"text/javascript\"&gt;&lt;/script&gt;\n</code></pre>\n\n<h3 id='gantt_scheduler_localization-section-static-gantt-localization'>Static Gantt localization</h3>\n\n<p>The only difference from Scheduler is that Gantt needs to include the corresponding Scheduler locale as well:</p>\n\n<pre><code>&lt;!-- Library --&gt;\n&lt;script src=\"gantt-2.2.5/gnt-all-debug.js\" type=\"text/javascript\"&gt;&lt;/script&gt;\n\n&lt;!-- Locales --&gt;\n&lt;script src=\"gantt-2.2.5/js/Sch/locale/De.js\" type=\"text/javascript\"&gt;&lt;/script&gt;\n&lt;script src=\"gantt-2.2.5/js/Gnt/locale/De.js\" type=\"text/javascript\"&gt;&lt;/script&gt;\n</code></pre>\n\n<h3 id='gantt_scheduler_localization-section-dynamic-scheduler-localization'>Dynamic Scheduler localization</h3>\n\n<p>Dynamic localization can be used in an MVC application where you don't usually load static bundles, but instead use on-demand loading of your classes\nin development and optimized builds with Sencha Cmd in production.</p>\n\n<p>Don't forget to setup the paths to the scheduler source files in <code>Ext.Loader</code>:</p>\n\n<pre><code>Ext.Loader.setConfig({\n    paths       : {\n        Sch         : 'scheduler-2.2.5/js/lib/Sch'\n    }\n})\n</code></pre>\n\n<p>By default, the scheduler already requires the \"<a href=\"#!/api/Sch.locale.En\" rel=\"Sch.locale.En\" class=\"docClass\">Sch.locale.En</a>\" class. To change that, you can just specify some other locale\nas required class somewhere in your application. Sencha Cmd will detect it as a dependency and include it in the optimized build of your application:</p>\n\n<pre><code>Ext.define('MyScheduler', {\n    extend      : '<a href=\"#!/api/Sch.panel.SchedulerGrid\" rel=\"Sch.panel.SchedulerGrid\" class=\"docClass\">Sch.panel.SchedulerGrid</a>',\n\n    requires    : [\n        '<a href=\"#!/api/Sch.locale.De\" rel=\"Sch.locale.De\" class=\"docClass\">Sch.locale.De</a>',\n        ...\n    ]\n})\n</code></pre>\n\n<h3 id='gantt_scheduler_localization-section-dynamic-gantt-localization'>Dynamic Gantt localization</h3>\n\n<p>Dynamic localization of Ext Gantt can be done the same way as for Ext Scheduler. There's no need to require corresponding\nscheduler locale - it is already required by the gantt locale, but <strong>make sure that you've configured paths for both Sch and Gnt namespaces</strong>:</p>\n\n<pre><code>Ext.Loader.setConfig({\n    paths       : {\n        Sch         : 'gantt-2.2.5/js/lib/Sch',\n        Gnt         : 'gantt-2.2.5/js/lib/Gnt'\n    }\n})\n</code></pre>\n\n<p>As with Ext Scheduler, you may want to explicitly include the locale as a required class for one of your own classes.</p>\n\n<h2 id='gantt_scheduler_localization-section-creating-locales-for-new-languages'>Creating locales for new languages</h2>\n\n<p>Our default (and hence the most up-to-date locale) is the English one. So whenever you decide to add a new translation you should always use\nthe English version as your base.\nAll you need to do to add a new locale is:</p>\n\n<ol>\n<li>Copy the existing English locale file (<code>js/Sch/locale/En.js</code> or <code>js/Gnt/locale/En.js</code> for gantt).</li>\n<li>Rename it according to the new language name.</li>\n<li>Edit the file content and give a proper name to locale class (according to the given file name) and enter the phrase translations.</li>\n<li>Put it in the 'locale' sub-folder (if it's not there already).</li>\n</ol>\n\n\n<p>Note, that all locale classes are singletons. Also, Gantt locales must include the corresponding Scheduler locales in their \"requires\" section.</p>\n\n<h2 id='gantt_scheduler_localization-section-localizable-mixin'>Localizable mixin</h2>\n\n<p>Now we've covered the ground work of how to handle localization. Let's check how UI classes can retrieve and use the translation of a specific phrase.</p>\n\n<p>To be able to do that, those classes need to consume the <a href=\"#!/api/Sch.mixin.Localizable\" rel=\"Sch.mixin.Localizable\" class=\"docClass\">Sch.mixin.Localizable</a> mixin.\nThis mixin provides a method called <a href=\"#!/api/Sch.mixin.Localizable-method-localize\" rel=\"Sch.mixin.Localizable-method-localize\" class=\"docClass\">localize</a> which accepts a phrase \"id\" and returns the text from the current locale.</p>\n\n<p>For example:</p>\n\n<pre><code>Ext.define('My.Toolbar', {\n    extend      : 'Ext.Toolbar',\n    mixins      : [ '<a href=\"#!/api/Sch.mixin.Localizable\" rel=\"Sch.mixin.Localizable\" class=\"docClass\">Sch.mixin.Localizable</a>' ],\n\n    initComponent   : function () {\n        Ext.apply(this, {\n            items   : [\n                {\n                    xtype       : 'button',\n\n                    // get the button label from the current locale\n                    text        : this.localize('loginText')\n                }\n            ]\n        });\n\n        this.callParent(arguments);\n    }\n});\n</code></pre>\n","title":"Localizing Scheduler and Gantt"});