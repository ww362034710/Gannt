Ext.data.JsonP.gantt_data_integration({"guide":"<p>This guide will show you how to integrate the Ext Gantt component with your server (CRUD). The guide is generic and does not assume you're using a\n<div class='toc'>\n<p><strong>Contents</strong></p>\n<ol>\n<li><a href='#!/guide/gantt_data_integration-section-read%3A-server-request'>Read: Server request</a></li>\n<li><a href='#!/guide/gantt_data_integration-section-read%3A-server-response'>Read: Server response</a></li>\n<li><a href='#!/guide/gantt_data_integration-section-create%3A-request'>Create: Request</a></li>\n<li><a href='#!/guide/gantt_data_integration-section-create%3A-response'>Create: Response</a></li>\n<li><a href='#!/guide/gantt_data_integration-section-update%3A-request'>Update: Request</a></li>\n<li><a href='#!/guide/gantt_data_integration-section-update-%3A-response'>Update : Response</a></li>\n<li><a href='#!/guide/gantt_data_integration-section-delete%3A-request'>Delete: Request</a></li>\n<li><a href='#!/guide/gantt_data_integration-section-delete%3A-response'>Delete: Response</a></li>\n<li><a href='#!/guide/gantt_data_integration-section-summing-up'>Summing up</a></li>\n</ol>\n</div>\nparticular backend or database. The only pre-requisites is that you need to know how to communicate from a browser to your server using Ajax.\nFor further guidance, you may also want to look at the ASP.NET and PHP samples available in the SDK/examples folder.</p>\n\n<p>The guide is divided into 4 parts showing how each of the Create, Read, Update and Delete operations are done.</p>\n\n<p>First let's define a store (<a href=\"http://bryntum.com/docs/#!/api/Gnt.data.TaskStore\">TaskStore</a>) with an Ajax proxy which will communicate with our backend scripts :</p>\n\n<pre><code>var taskStore = new <a href=\"#!/api/Gnt.data.TaskStore\" rel=\"Gnt.data.TaskStore\" class=\"docClass\">Gnt.data.TaskStore</a>({\n    proxy : {\n        type    : 'ajax',\n        method  : 'POST',\n        reader  : {\n            type : 'json'\n        }, \n        api: {\n            read    : 't-read.php',\n            create  : 't-create.php',\n            destroy : 't-destroy.php',\n            update  : 't-update.php'\n        },\n        writer : {\n            type        : 'json',\n            root        : 'data',\n            encode      : true,\n            allowSingle : false\n        }\n    }\n});\n</code></pre>\n\n<p>For more details about setting up a data proxy for a store, please consult the <a href=\"http://docs.sencha.com/ext-js/4-1/#!/api/Ext.data.proxy.Proxy\">Sencha documentation</a>.\nNote the DataWriter <code>allowSingle</code> config - if set to false, records sent to the server will always be wrapped in an array.\nAlso note the DataWriter <code>root</code> config - it defines the name of the request parameter that will store the array of data (when encode is true).</p>\n\n<h1 id='gantt_data_integration-section-reading'>Reading</h1>\n\n<p><p><img src=\"guides/gantt_data_integration/task_read.png\" alt=\"\" width=\"666\" height=\"211\"></p></p>\n\n<p>In Ext Gantt 2+, we use flat arrays of records for all CRUD operations except when reading the task tree.\nWhen initially loading data into the Gantt chart, the server should return an array of the root level tasks. Each task that contain subtasks should contain\na nested 'children' array member. If a node has no children, the 'children' parameter shouldn't exist and its leaf property should be set to 'true'.</p>\n\n<h2 id='gantt_data_integration-section-read%3A-server-request'>Read: Server request</h2>\n\n<p>The client issues a GET (unless you defined otherwise in the 'actionMethods' config of your proxy) and passes a 'node' param which is empty for the initial load.\nIf you only want to load a certain number of levels in your tree, you can indicate that there are child nodes by setting leaf to false, and include no child nodes.\nWhen such a node is expanded, you will be passed the node id as the 'node' param.</p>\n\n<pre><code>GET http://localhost/ExtGantt2.x/examples/advanced/tasks.js?node=&amp;\n</code></pre>\n\n<h2 id='gantt_data_integration-section-read%3A-server-response'>Read: Server response</h2>\n\n<p>This is a sample response from the server when loading a page with a structure shown on the image (some parameters were removed to improve readability):</p>\n\n<pre><code>[\n   {\n      \"Id\":\"14\",\n      \"parentId\":\"null\",\n      \"leaf\":\"false\",\n      \"Name\":\"T1\",\n      \"StartDate\":\"2012-06-27T00:00:00\",\n      \"EndDate\":\"2012-06-29T00:00:00\",\n      \"Duration\":\"2\",\n      \"DurationUnit\":\"d\",\n      \"children\":[\n         {\n            \"Id\":\"22\",\n            \"parentId\":\"14\",\n            \"leaf\":\"true\",\n            \"Name\":\"T2\",\n            \"StartDate\":\"2012-06-27T00:00:00\",\n            \"EndDate\":\"2012-06-29T00:00:00\",\n            \"Duration\":\"2\",\n            \"DurationUnit\":\"d\",\n         }\n      ]\n   }\n]\n</code></pre>\n\n<h1 id='gantt_data_integration-section-creating'>Creating</h1>\n\n<p>Let's continue to add a new task under the <code>T2</code> task.</p>\n\n<p><p><img src=\"guides/gantt_data_integration/task_add.png\" alt=\"\" width=\"648\" height=\"219\"></p></p>\n\n<p>When adding new tasks, the server script should expect an input of flat array of records. The response should also be a flat structure of the created\nnodes.</p>\n\n<h2 id='gantt_data_integration-section-create%3A-request'>Create: Request</h2>\n\n<p>This is a sample request to the server when adding one new task (note that the Id parameter is sent as null):</p>\n\n<pre><code>[\n    {\n        \"Id\": null,\n        \"parentId\": \"14\",\n        \"leaf\": true,\n        \"StartDate\": \"2012-06-27T00:00:00\",\n        \"EndDate\": \"2012-06-29T00:00:00\",\n        \"Name\": \"New task\",\n        \"Duration\": 2,\n        \"PercentDone\": 0,\n        \"BaselineStartDate\": null,\n        \"BaselineEndDate\": null,\n        \"BaselinePercentDone\": 0,\n        \"DurationUnit\": \"d\"\n    }\n]\n</code></pre>\n\n<p>For each record to create, you need to update the <code>Id</code> property with the new value assigned by the database.\nWhen all tasks are added and have received their propers Ids, encode the array to JSON and return it as the response.\nNote: The order of the tasks that you return to the client must be maintained.</p>\n\n<h2 id='gantt_data_integration-section-create%3A-response'>Create: Response</h2>\n\n<p>This is a response from the server after adding a single task (note that the Id field is now set):</p>\n\n<pre><code>[\n   {\n      \"Id\":45,\n      \"parentId\":\"14\",\n      \"leaf\":true,\n      \"StartDate\":\"2012-06-27T00:00:00\",\n      \"EndDate\":\"2012-06-29T00:00:00\",\n      \"Name\":\"New task\",\n      \"Duration\":2,\n      \"PercentDone\":0,\n      \"ManuallyScheduled\":false,\n      \"SchedulingMode\":\"Normal\",\n      \"BaselineStartDate\":null,\n      \"BaselineEndDate\":null,\n      \"BaselinePercentDone\":0,\n      \"DurationUnit\":\"d\"\n   }\n]\n</code></pre>\n\n<h1 id='gantt_data_integration-section-updating'>Updating</h1>\n\n<p>Now let's rename our <code>New task</code> to <code>T3</code> :</p>\n\n<p><p><img src=\"guides/gantt_data_integration/task_update_1.png\" alt=\"\" width=\"305\" height=\"64\"></p></p>\n\n<p>and the structure after confirming the change :</p>\n\n<p><p><img src=\"guides/gantt_data_integration/task_update_2.png\" alt=\"\" width=\"645\" height=\"209\"></p></p>\n\n<h2 id='gantt_data_integration-section-update%3A-request'>Update: Request</h2>\n\n<p>This is a simple request to the server when updating one task:</p>\n\n<pre><code>[\n    {\n        \"Id\": 45,\n        \"parentId\": \"14\",\n        \"leaf\": true,\n        \"StartDate\": \"2012-06-27T00:00:00\",\n        \"EndDate\": \"2012-06-29T00:00:00\",\n        \"Name\": \"T3\",\n        \"Duration\": 2,\n        \"PercentDone\": 0,\n        \"BaselineStartDate\": null,\n        \"BaselineEndDate\": null,\n        \"BaselinePercentDone\": 0,\n        \"DurationUnit\": \"d\"\n    }\n]\n</code></pre>\n\n<h2 id='gantt_data_integration-section-update-%3A-response'>Update : Response</h2>\n\n<p>When the server has saved all tasks, it should encode the array to JSON and return it as the response.\nHere is the response from the server after updating one task (it's identical to the request, but the server could also make changes to the data of course):\nNote: The order of the tasks that you return to the client must be maintained.</p>\n\n<pre><code>[\n    {\n        \"Id\": 45,\n        \"parentId\": \"14\",\n        \"leaf\": true,\n        \"StartDate\": \"2012-06-27T00:00:00\",\n        \"EndDate\": \"2012-06-29T00:00:00\",\n        \"Name\": \"T3\",\n        \"Duration\": 2,\n        \"PercentDone\": 0,\n        \"BaselineStartDate\": null,\n        \"BaselineEndDate\": null,\n        \"BaselinePercentDone\": 0,\n        \"DurationUnit\": \"d\"\n    }\n]\n</code></pre>\n\n<h1 id='gantt_data_integration-section-delete'>Delete</h1>\n\n<h2 id='gantt_data_integration-section-delete%3A-request'>Delete: Request</h2>\n\n<p>This is a simple request to the server when deleting one task (T3) :</p>\n\n<pre><code>[\n    {\n        \"Id\": 45,\n        \"parentId\": \"14\",\n        \"leaf\": true,\n        \"StartDate\": \"2012-06-27T00:00:00\",\n        \"EndDate\": \"2012-06-29T00:00:00\",\n        \"Name\": \"T3\",\n        \"Duration\": 2,\n        \"BaselineStartDate\": null,\n        \"BaselineEndDate\": null,\n        \"BaselinePercentDone\": 0,\n    }\n]\n</code></pre>\n\n<p>The server should simply remove all database entries corresponding to the id's found in the incoming array.</p>\n\n<h2 id='gantt_data_integration-section-delete%3A-response'>Delete: Response</h2>\n\n<p>The response from the server after deleting one or more tasks is simple, it should only return a success property:</p>\n\n<pre><code>'{\"success\": true}'\n</code></pre>\n\n<h2 id='gantt_data_integration-section-summing-up'>Summing up</h2>\n\n<p>This guide shows you how to do simple CRUD for your tasks. The same request/response conventions apply to other stores, such DependencyStore and AssignmentStore.\nIf you have specific needs to handle data integrity, you may want to consider sending all the updated content from the client to the server in one request.\nThis also enables you to use a database transaction for your operation. You can ask each store for its new, updated and removed records and then build a\ncustom request object such as:</p>\n\n<pre><code>saveData : function() {\n    var newTasks = ...; // Get from task store, encode\n    var updatedTasks = ...; // Get from task store, encode\n    var removedTasks = ...; // Get from task store, encode\n\n    var newDependencies = ...; // Get from dependency store, encode\n    var updatedDependencies = ...; // Get from dependency store, encode\n    var removedDependencies = ...; // Get from dependency store, encode\n\n    var data = {\n       tasks : {\n           \"new\"       : newTasks,\n           updated     : updatedTasks,\n           removed     : removedTasks\n       },\n\n       dependencies : {\n           \"new\"       : newDependencies,\n           updated     : updatedDependencies,\n           removed     : removedDependencies\n       }\n   };\n\n   Ext.Ajax.request({\n        url         : 'YOUR_SAVE_URL',\n        method      : 'POST',\n        jsonData    : data,\n\n        success     : function (response) {\n            // we're done!\n        }\n    });\n}\n</code></pre>\n","title":"Data integration"});