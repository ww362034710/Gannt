Ext.data.JsonP.gantt_crud_manager({"guide":"<h1 id='gantt_crud_manager-section-crud-manager-for-ext-gantt'>CRUD manager for Ext Gantt</h1>\n<div class='toc'>\n<p><strong>Contents</strong></p>\n<ol>\n<li><a href='#!/guide/gantt_crud_manager-section-intro'>Intro</a></li>\n<li><a href='#!/guide/gantt_crud_manager-section-stores'>Stores</a></li>\n<li><a href='#!/guide/gantt_crud_manager-section-implementation'>Implementation</a></li>\n<li><a href='#!/guide/gantt_crud_manager-section-calendars'>Calendars</a></li>\n<li><a href='#!/guide/gantt_crud_manager-section-error-handling'>Error handling</a></li>\n<li><a href='#!/guide/gantt_crud_manager-section-writing-own-server-side-implementation.'>Writing own server-side implementation.</a></li>\n</ol>\n</div>\n\n<h2 id='gantt_crud_manager-section-intro'>Intro</h2>\n\n<p>This guide describes the CRUD manager implementation for Ext Gantt.\nIt contains only Gantt specific details. For general information on CRUD manager implementation and architecture\nsee <a href=\"#!/guide/crud_manager\">this guide</a>.</p>\n\n<p>The class implementing <em>CRUD manager</em> for Ext Gantt is called <a href=\"#!/api/Gnt.data.CrudManager\" rel=\"Gnt.data.CrudManager\" class=\"docClass\">Gnt.data.CrudManager</a>.\nIt uses <a href=\"#!/api/Sch.crud.transport.Ajax\" rel=\"Sch.crud.transport.Ajax\" class=\"docClass\">AJAX</a> as transport system and <a href=\"#!/api/Sch.crud.encoder.Json\" rel=\"Sch.crud.encoder.Json\" class=\"docClass\">JSON</a> as encoding format.</p>\n\n<h2 id='gantt_crud_manager-section-stores'>Stores</h2>\n\n<p>There are a number of stores used in Gantt: calendars, resources, assignments, dependencies and tasks store.\nAnd to register them in a <a href=\"#!/api/Gnt.data.CrudManager\" rel=\"Gnt.data.CrudManager\" class=\"docClass\">Gnt.data.CrudManager</a> instance following configs should be used respectively:\n<a href=\"#!/api/Gnt.data.CrudManager-cfg-calendarManager\" rel=\"Gnt.data.CrudManager-cfg-calendarManager\" class=\"docClass\">calendarManager</a>, <a href=\"#!/api/Gnt.data.CrudManager-cfg-resourceStore\" rel=\"Gnt.data.CrudManager-cfg-resourceStore\" class=\"docClass\">resourceStore</a>,\n<a href=\"#!/api/Gnt.data.CrudManager-cfg-assignmentStore\" rel=\"Gnt.data.CrudManager-cfg-assignmentStore\" class=\"docClass\">assignmentStore</a>, <a href=\"#!/api/Gnt.data.CrudManager-cfg-dependencyStore\" rel=\"Gnt.data.CrudManager-cfg-dependencyStore\" class=\"docClass\">dependencyStore</a>,\n<a href=\"#!/api/Gnt.data.CrudManager-cfg-taskStore\" rel=\"Gnt.data.CrudManager-cfg-taskStore\" class=\"docClass\">taskStore</a>.</p>\n\n<pre><code>var crudManager = Ext.create('<a href=\"#!/api/Gnt.data.CrudManager\" rel=\"Gnt.data.CrudManager\" class=\"docClass\">Gnt.data.CrudManager</a>', {\n    autoLoad        : true,\n    calendarManager : calendarManager,\n    resourceStore   : resourceStore,\n    dependencyStore : dependencyStore,\n    assignmentStore : assignmentStore\n    taskStore       : taskStore,\n    transport       : {\n        load    : {\n            url     : 'php/read.php'\n        },\n        sync    : {\n            url     : 'php/save.php'\n        }\n    }\n});\n</code></pre>\n\n<p>Normally user doesn't have to specify <a href=\"#!/api/Gnt.data.CrudManager-cfg-calendarManager\" rel=\"Gnt.data.CrudManager-cfg-calendarManager\" class=\"docClass\">calendarManager</a>, <a href=\"#!/api/Gnt.data.CrudManager-cfg-resourceStore\" rel=\"Gnt.data.CrudManager-cfg-resourceStore\" class=\"docClass\">resourceStore</a>,\n<a href=\"#!/api/Gnt.data.CrudManager-cfg-dependencyStore\" rel=\"Gnt.data.CrudManager-cfg-dependencyStore\" class=\"docClass\">dependencyStore</a> and <a href=\"#!/api/Gnt.data.CrudManager-cfg-assignmentStore\" rel=\"Gnt.data.CrudManager-cfg-assignmentStore\" class=\"docClass\">assignmentStore</a>\nconfigs if they were already specified for the task store instance.\nThe CRUD manager will just take them from the provided task store instance:</p>\n\n<pre><code>var taskStore = Ext.create('<a href=\"#!/api/Gnt.data.TaskStore\" rel=\"Gnt.data.TaskStore\" class=\"docClass\">Gnt.data.TaskStore</a>', {\n    calendarManager : calendarManager,\n    resourceStore   : resourceStore,\n    dependencyStore : dependencyStore,\n    assignmentStore : assignmentStore\n});\n\nvar crudManager = Ext.create('<a href=\"#!/api/Gnt.data.CrudManager\" rel=\"Gnt.data.CrudManager\" class=\"docClass\">Gnt.data.CrudManager</a>', {\n    autoLoad        : true,\n    // We specify TaskStore only. The rest stores will be taken from it.\n    taskStore       : taskStore,\n    transport       : {\n        load    : {\n            url     : 'php/read.php'\n        },\n        sync    : {\n            url     : 'php/save.php'\n        }\n    }\n});\n</code></pre>\n\n<p>User can provide any number of extra stores using <a href=\"#!/api/Gnt.data.CrudManager-cfg-stores\" rel=\"Gnt.data.CrudManager-cfg-stores\" class=\"docClass\">stores</a> config:</p>\n\n<pre><code>var crudManager = Ext.create('<a href=\"#!/api/Gnt.data.CrudManager\" rel=\"Gnt.data.CrudManager\" class=\"docClass\">Gnt.data.CrudManager</a>', {\n    taskStore       : taskStore,\n    stores          : [ store1, store2, store3 ],\n    transport       : {\n        load    : {\n            url     : 'php/read.php'\n        },\n        sync    : {\n            url     : 'php/save.php'\n        }\n    }\n});\n</code></pre>\n\n<p>Or add them with <a href=\"#!/api/Gnt.data.CrudManager-method-addStore\" rel=\"Gnt.data.CrudManager-method-addStore\" class=\"docClass\">addStore</a> method:</p>\n\n<pre><code>crudManager.addStore([ store2, store3 ]);\n</code></pre>\n\n<h2 id='gantt_crud_manager-section-implementation'>Implementation</h2>\n\n<p>Here is how CRUD manager can be created:</p>\n\n<pre><code>var crudManager = Ext.create('<a href=\"#!/api/Gnt.data.CrudManager\" rel=\"Gnt.data.CrudManager\" class=\"docClass\">Gnt.data.CrudManager</a>', {\n    autoLoad        : true,\n    taskStore       : taskStore,\n    transport       : {\n        load    : {\n            url     : 'php/read.php'\n        },\n        sync    : {\n            url     : 'php/save.php'\n        }\n    }\n});\n</code></pre>\n\n<p>In above example data loading will start automatically due to <a href=\"#!/api/Gnt.data.CrudManager-cfg-autoLoad\" rel=\"Gnt.data.CrudManager-cfg-autoLoad\" class=\"docClass\">autoLoad</a> config set to <code>true</code>.\nThere is also a <a href=\"#!/api/Gnt.data.CrudManager-method-load\" rel=\"Gnt.data.CrudManager-method-load\" class=\"docClass\">load</a> method to invoke data loading manually:</p>\n\n<pre><code>crudManager.load(function (response) {\n    alert('Data loaded...');\n})\n</code></pre>\n\n<p>And to persist changes there are also <a href=\"#!/api/Gnt.data.CrudManager-cfg-autoSync\" rel=\"Gnt.data.CrudManager-cfg-autoSync\" class=\"docClass\">autoSync</a> for automatic invoking\nand <a href=\"#!/api/Gnt.data.CrudManager-method-sync\" rel=\"Gnt.data.CrudManager-method-sync\" class=\"docClass\">sync</a> method for manual usage:</p>\n\n<pre><code>crudManager.sync(function (response) {\n    alert('Changes saved...');\n});\n</code></pre>\n\n<p>Any <a href=\"#!/api/Gnt.panel.Gantt\" rel=\"Gnt.panel.Gantt\" class=\"docClass\">Gnt.panel.Gantt</a> instances can be pointed to use <em>CRUD manager</em> using <a href=\"#!/api/Gnt.panel.Gantt-cfg-crudManager\" rel=\"Gnt.panel.Gantt-cfg-crudManager\" class=\"docClass\">crudManager</a> config.\nIn this case you don't need to specify <a href=\"#!/api/Gnt.panel.Gantt-cfg-taskStore\" rel=\"Gnt.panel.Gantt-cfg-taskStore\" class=\"docClass\">taskStore</a>, <a href=\"#!/api/Gnt.panel.Gantt-cfg-dependencyStore\" rel=\"Gnt.panel.Gantt-cfg-dependencyStore\" class=\"docClass\">dependencyStore</a>,\n<a href=\"#!/api/Gnt.panel.Gantt-cfg-resourceStore\" rel=\"Gnt.panel.Gantt-cfg-resourceStore\" class=\"docClass\">resourceStore</a>, <a href=\"#!/api/Gnt.panel.Gantt-cfg-assignmentStore\" rel=\"Gnt.panel.Gantt-cfg-assignmentStore\" class=\"docClass\">assignmentStore</a>\non a panel. They will be taken from provided <a href=\"#!/api/Gnt.panel.Gantt-cfg-crudManager\" rel=\"Gnt.panel.Gantt-cfg-crudManager\" class=\"docClass\">crudManager</a> instance.</p>\n\n<pre><code>Ext.create('<a href=\"#!/api/Gnt.panel.Gantt\" rel=\"Gnt.panel.Gantt\" class=\"docClass\">Gnt.panel.Gantt</a>', {\n    viewPreset          : 'dayAndWeek',\n    startDate           : new Date(2014, 0, 1),\n    endDate             : new Date(2014, 1, 1),\n    width               : 800,\n    height              : 350,\n    // point grid to use CRUD manager\n    crudManager         : crudManager\n    columns             : [\n        {\n            xtype   : 'namecolumn'\n        },\n        {\n            xtype   : 'startdatecolumn'\n        }\n    ]\n});\n</code></pre>\n\n<h2 id='gantt_crud_manager-section-calendars'>Calendars</h2>\n\n<p><a href=\"#!/api/Gnt.data.CrudManager\" rel=\"Gnt.data.CrudManager\" class=\"docClass\">Gnt.data.CrudManager</a> supports a bulk loading of all the project calendars.\nTo do it the <a href=\"#!/api/Gnt.data.CrudManager-cfg-calendarManager\" rel=\"Gnt.data.CrudManager-cfg-calendarManager\" class=\"docClass\">Gnt.data.CrudManager.calendarManager</a> config has to be specified or it can be specified on a <a href=\"#!/api/Gnt.data.TaskStore-cfg-calendarManager\" rel=\"Gnt.data.TaskStore-cfg-calendarManager\" class=\"docClass\">task store</a>.</p>\n\n<pre><code>var calendarManager   = Ext.create('<a href=\"#!/api/Gnt.data.CalendarManager\" rel=\"Gnt.data.CalendarManager\" class=\"docClass\">Gnt.data.CalendarManager</a>', {\n    calendarClass   : '<a href=\"#!/api/Gnt.data.calendar.BusinessTime\" rel=\"Gnt.data.calendar.BusinessTime\" class=\"docClass\">Gnt.data.calendar.BusinessTime</a>'\n});\n\n...\n\nvar taskStore     = Ext.create('Gnt.data.TakStore', {\n    // taskStore calendar will automatically be set when calendarManager gets loaded\n    calendarManager : calendarManager,\n    resourceStore   : resourceStore,\n    dependencyStore : dependencyStore,\n    assignmentStore : assignmentStore\n});\n\nvar crudManager   = Ext.create('<a href=\"#!/api/Gnt.data.CrudManager\" rel=\"Gnt.data.CrudManager\" class=\"docClass\">Gnt.data.CrudManager</a>', {\n    autoLoad        : true,\n    taskStore       : taskStore,\n    transport       : {\n        load    : {\n            url     : 'php/read.php'\n        },\n        sync    : {\n            url     : 'php/save.php'\n        }\n    }\n});\n</code></pre>\n\n<h3 id='gantt_crud_manager-section-load-response-structure'>Load response structure</h3>\n\n<p>Calendar manager load response have a more complex structure than <a href=\"#!/guide/crud_manager-section-4\">described general one</a>.</p>\n\n<p>The first difference from standard response is for each calendar we include its data under the <code>Days</code> field.\nThe object under <code>Days</code> field has exactly the same structure as any other object holding a store data.\nIt has <code>rows</code> containing array of calendar records (each of represents <a href=\"#!/api/Gnt.model.CalendarDay\" rel=\"Gnt.model.CalendarDay\" class=\"docClass\">Gnt.model.CalendarDay</a> instances) and <code>total</code> having total number of them.</p>\n\n<p>And another thing to take a note is how <code>metaData</code> is used for calendar manager loading.\nIt has the <code>projectCalendar</code> property which <strong>must</strong> contain the identifier of the calendar that has to be used as a <strong>project calendar</strong>.</p>\n\n<pre><code>{\n    requestId   : 123890,\n    revision    : 123,\n    success     : true,\n\n    calendars   : {\n        // each record represents <a href=\"#!/api/Gnt.model.Calendar\" rel=\"Gnt.model.Calendar\" class=\"docClass\">Gnt.model.Calendar</a> instance\n        rows        : [\n            {\n                Id                  : \"1\",\n                parentId            : null,\n                Name                : \"General\",\n                DaysPerMonth        : 20,\n                DefaultAvailability : [\"08:00-12:00\",\"13:00-17:00\"],\n                ...\n                // here we include calendar data\n                Days                : {\n                    // each record represents <a href=\"#!/api/Gnt.model.CalendarDay\" rel=\"Gnt.model.CalendarDay\" class=\"docClass\">Gnt.model.CalendarDay</a> instance\n                    rows    : [{\n                        Id                  : 2,\n                        calendarId          : \"1\",\n                        Name                : \"Some big holiday\",\n                        Type                : \"DAY\",\n                        Date                : \"2010-01-14\",\n                        Availability        : [],\n                        Weekday             : 0,\n                        OverrideStartDate   : null,\n                        OverrideEndDate     : null,\n                        IsWorkingDay        : false,\n                        Cls                 : \"gnt-national-holiday\"\n                    }],\n                    total   : 1\n                },\n                // child calendars go here\n                // each record represents <a href=\"#!/api/Gnt.model.Calendar\" rel=\"Gnt.model.Calendar\" class=\"docClass\">Gnt.model.Calendar</a> instance\n                children    : [{\n                    Id          : \"2\",\n                    parentId    : \"1\",\n                    Name        : \"Holidays\",\n                    ...\n                    // \"Holidays\" calendar data\n                    Days        : {\n                        // each record represents <a href=\"#!/api/Gnt.model.CalendarDay\" rel=\"Gnt.model.CalendarDay\" class=\"docClass\">Gnt.model.CalendarDay</a> instance\n                        rows    : [\n                            {\n                                Id          : 3,\n                                calendarId  : \"2\",\n                                Name        : \"Mats's birthday\",\n                                Date        : \"2010-01-13\",\n                                ...\n                            },\n                            {\n                                Id          : 4\n                                calendarId  : \"2\",\n                                Name        : \"Bryntum company holiday\",\n                                Date        : \"2010-02-01\",\n                                ...\n                            },\n                            {\n                                Id          : 5,\n                                calendarId  : \"2\",\n                                Name        : \"Bryntum 1st birthday\",\n                                Date        : \"2010-12-01\",\n                                ...\n                            }\n                        ],\n                        total   : 3\n                    },\n                    leaf    : true\n                }]\n            }\n        ],\n        total       : 2,\n        metaData    : {\n            // this specifies identifier of the project calendar\n            projectCalendar : \"1\"\n        }\n\n    },\n\n    store2      : {\n        ...\n    },\n\n    store3      : {\n        ...\n    }\n}\n</code></pre>\n\n<h2 id='gantt_crud_manager-section-error-handling'>Error handling</h2>\n\n<p>See <a href=\"#!/guide/crud_manager-section-5\">details on error handling in general guide</a>.</p>\n\n<h2 id='gantt_crud_manager-section-writing-own-server-side-implementation.'>Writing own server-side implementation.</h2>\n\n<p>User can make own server-side implementation for any platform. The only requirement is to follow <a href=\"#!/guide/crud_manager-section-3\">requests and responses structure convention</a>.</p>\n\n<h3 id='gantt_crud_manager-section-testing-server-side-implementation'>Testing server-side implementation</h3>\n\n<p>There is a test suite located in <code>tests/crud_manager/11_backend.t.js</code> file.\nThe suite is made for the <a href=\"http://www.bryntum.com/products/siesta/\">Bryntum Siesta</a> testing tool.\nIt allows to test server-side implementation by sending a group of <code>load</code> and <code>sync</code> requests for a number of test scenarios\nand verifying their results.\nThis suite can be used to test any server-side implementation.</p>\n\n<p>All that should be done to apply it to a custom implementation is just to specify another URL-s for backend end-points. Like this for example:</p>\n\n<pre><code>{\n    url         : 'crud_manager/11_backend.t.js',\n    load        : {\n        url     : '../some/path/read.jsp',\n        method  : 'POST'\n    },\n    sync        : {\n        url     : '../some/path/save.jsp',\n        method  : 'POST'\n    },\n    resetUrl    : '../some/path/reset.jsp'\n}\n</code></pre>\n\n<p>The <code>load</code> and <code>sync</code> section also accept <code>method</code> config specifying HTTP method that should be used to requesting corresponding URL.</p>\n\n<p><strong>Note:</strong> The end-point specified by <code>resetUrl</code> config must clear the testing database.</p>\n","title":"CRUD manager for Ext Gantt"});